apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "operator.fullname" . }}-configs
  labels:
    {{- include "operator.labels" . | nindent 4 }}
  annotations:
    "helm.sh/resource-policy": keep
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
data:
  keymanageropts.json: |-
    {
        "direct_eip_version": "EIP-2335",
        "direct_version": "2"
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "operator.fullname" . }}-init
  labels:
    {{- include "operator.labels" . | nindent 4 }}
  annotations:
    "helm.sh/resource-policy": keep
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
data:
  validator-init.sh: |
    #!/bin/bash
    export KUBE_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    VAULT_CLIENT=`curl --silent --request POST --data '{"jwt": "'"${KUBE_TOKEN}"'", "role": "'"${SERVICE_ACCOUNT}"'"}' ${VAULT_ADDR}/v1/auth/kubernetes/login`
    export VAULT_TOKEN="$(echo ${VAULT_CLIENT} | jq -r '.auth.client_token')"

    VAULT="/vault"
    VAULT_KEYSTORES="${VAULT}/keystores"
    VAULT_PASSWORD="${VAULT}/password.txt"
    DATA="/data"
    DATA_PRYSM="${DATA}/prysm"
    DATA_LIGHTHOUSE="${DATA}/lighthouse"
    SLASHING_PROTECTION_FILE="/data/slashing_protection.json"

    # Get keystores password
    rm -rf ${VAULT} || true
    mkdir -p ${VAULT_KEYSTORES}
    PASSWORD=$(vault kv get -field=password.txt -version=1 validators/${SERVICE_ACCOUNT}/password)
    echo ${PASSWORD} > ${VAULT_PASSWORD}

    echo "$(vault kv get -version=1 validators/${SERVICE_ACCOUNT}/keystores)" > ${VAULT}/keystores.txt
    while read line; do
        if [[ "$line" =~ ^keystore.* ]]; then
            echo $line | awk '{ print substr($0, index($0,$2)) }' > ${VAULT_KEYSTORES}/`echo $line | awk '{print $1}'`
        fi
    done <${VAULT}/keystores.txt
    rm -f ${VAULT}/keystores.txt
    rm -rf ${DATA_LIGHTHOUSE}/validators/0* \
           ${DATA_LIGHTHOUSE}/validators/validator_definitions.yml \
           ${DATA_PRYSM}/validators || true

    if [[ "$VALIDATOR_TYPE" = "prysm" ]]; then
        touch ${DATA_PRYSM}/tosaccepted
        prysm-validator \
            accounts \
            import \
            --keys-dir=${VAULT_KEYSTORES} \
            --account-password-file=${VAULT_PASSWORD} \
            --wallet-dir=${DATA_PRYSM}/validators \
            --wallet-password-file=${VAULT_PASSWORD} \
            --${NETWORK_ID:-"mainnet"} \
            --accept-terms-of-use
        cp ${VAULT_PASSWORD} ${DATA_PRYSM}/validators/password.txt
        rm ${VAULT_PASSWORD}
    elif [[ "$VALIDATOR_TYPE" = "lighthouse" ]]; then
        lighthouse-validator \
            --network=${NETWORK_ID:-"mainnet"} \
            account \
            validator \
            import \
            --datadir=${DATA_LIGHTHOUSE} \
            --reuse-password \
            --password-file=${VAULT_PASSWORD} \
            --directory=${VAULT_KEYSTORES}
        rm ${VAULT_PASSWORD}
    fi

    if [[ "$VALIDATOR_TYPE" != "`cat /data/validator.type`" ]]; then
        if [[ "$VALIDATOR_TYPE" = "prysm" ]]; then
            touch ${DATA_PRYSM}/tosaccepted
            lighthouse-validator account validator slashing-protection \
                export ${SLASHING_PROTECTION_FILE} \
                --datadir=${DATA_LIGHTHOUSE} \
                --network=${NETWORK_ID:-"mainnet"}
            if [ $? -eq 0 ]; then
                test -f ${DATA_PRYSM}/validator.db && rm -f ${DATA_PRYSM}/validator.db
                prysm-validator slashing-protection import \
                    --datadir=${DATA_PRYSM} \
                    --slashing-protection-json-file=${SLASHING_PROTECTION_FILE} \
                    --${NETWORK_ID:-"mainnet"}
            else
                echo "Slashing history export failed"
            fi
        elif [[ "$VALIDATOR_TYPE" = "lighthouse" ]]; then
            test -f ${SLASHING_PROTECTION_FILE} && rm -f ${SLASHING_PROTECTION_FILE}
            prysm-validator \
                --${NETWORK_ID:-"mainnet"} \
                slashing-protection \
                export \
                --datadir=${DATA_PRYSM} \
                --slashing-protection-export-dir=${DATA}
            if [ $? -eq 0 ]; then
                test -f ${DATA_LIGHTHOUSE}/validators/slashing_protection.sqlite && rm -f ${DATA_LIGHTHOUSE}/validators/slashing_protection.sqlite
                lighthouse-validator \
                    account \
                    validator \
                    slashing-protection \
                    import \
                    ${SLASHING_PROTECTION_FILE} \
                    --datadir=${DATA_LIGHTHOUSE} \
                    --network=${NETWORK_ID:-"mainnet"}
            else
                echo "Slashing history export failed"
            fi
        fi
    fi

    rm -rf ${VAULT} || true
