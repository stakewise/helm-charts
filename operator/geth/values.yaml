# Default values for geth.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Pod Security Context
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
securityContext:
  fsGroup: 1001
  runAsUser: 1001

# Init image is used to chown data volume, initialise genesis, etc.
initImage:
  repository: "busybox"
  tag: "1.34"
  pullPolicy: IfNotPresent

# Network (chain) ID
networkId: ""

# A node is used to interact with Ethereum transactions, contracts.
node:
  # Whether to deploy node or not.
  enabled: false

  ## Geth image version
  ## ref: https://hub.docker.com/r/ethereum/client-go/tags/
  image:
    repository: "ethereum/client-go"
    tag: "v1.10.6"
    pullPolicy: IfNotPresent

  # How many geth nodes to run simultaneously
  replicas: 1

  # Pod disruption budget
  # https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1

  # RPC configuration.
  rpc:
    enabled: false
    api: "web3,eth,net"
    corsDomain: ""
    vhosts: ""
    ingressEnabled: false
    ingressPath: /

  # WebSocket configuration.
  ws:
    enabled: false
    api: "web3,eth,net"
    origins: ""
    ingressEnabled: false
    ingressPath: /ws

  metrics:
    # Whether to enable metrics collection or not
    enabled: false

    port: 6060

    # Extra flags to pass for collecting metrics
    flags:
      - "--metrics"
      - "--pprof"
      - "--pprof.addr=0.0.0.0"
      - "--pprof.port=6060"

    # Metrics collection annotations to add to service
    svcAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "6060"
      prometheus.io/path: "/debug/metrics/prometheus"
    
    ## Prometheus Service Monitor
    ## ref: https://github.com/coreos/prometheus-operator
    ##      https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
    ##
    serviceMonitor:
      ## @param metrics.serviceMonitor.enabled Create ServiceMonitor resource(s) for scraping metrics using PrometheusOperator
      ##
      enabled: false
      ## @param metrics.serviceMonitor.namespace The namespace in which the ServiceMonitor will be created
      ##
      namespace: ""
      ## @param metrics.serviceMonitor.interval The interval at which metrics should be scraped
      ##
      interval: 30s
      ## @param metrics.serviceMonitor.scrapeTimeout The timeout after which the scrape is ended
      ##
      scrapeTimeout: ""
      ## @param metrics.serviceMonitor.relabellings Metrics RelabelConfigs to apply to samples before scraping.
      ##
      relabellings: []
      ## @param metrics.serviceMonitor.metricRelabelings Metrics RelabelConfigs to apply to samples before ingestion.
      ##
      metricRelabelings: []
      ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
      ##
      honorLabels: false
      ## @param metrics.serviceMonitor.additionalLabels Additional labels that can be used so ServiceMonitor resource(s) can be discovered by Prometheus
      ##
      additionalLabels: {}
    ## Custom PrometheusRule to be defined
    ## ref: https://github.com/coreos/prometheus-operator#customresourcedefinitions
    ##
    prometheusRule:
      ## @param metrics.prometheusRule.enabled Create a custom prometheusRule Resource for scraping metrics using PrometheusOperator
      ##
      enabled: false
      ## @param metrics.prometheusRule.namespace The namespace in which the prometheusRule will be created
      ##
      namespace: ""
      ## @param metrics.prometheusRule.additionalLabels Additional labels for the prometheusRule
      ##
      additionalLabels: {}
      ## @param metrics.prometheusRule.rules Custom Prometheus rules
      ## e.g:
      ## rules:
      ##   - alert: GethNodeDown
      ##     expr: up{job="{{ include "openethereum.fullname" . }}-node"} == 0
      ##     for: 5m
      ##     labels:
      ##       severity: error
      ##     annotations:
      ##       summary: Geth Node {{ "{{ $labels.instance }}" }} down
      ##       description: Geth Node {{ "{{ $labels.instance }}" }} is down
      ##
      rules: []

  # defines whether the service must be headless
  svcHeadless: false

  # used to expose node ports
  # ref: https://kubernetes.io/docs/concepts/services-networking/service/
  services:
    - name: discovery-tcp
      port: 30303
      protocol: TCP
    - name: discovery-udp
      port: 30303
      protocol: UDP

  # Configure session affinity for to hit the same geth node
  # for the period specified in `timeoutSeconds`
  # https://kubernetes.io/docs/concepts/services-networking/service/#proxy-mode-userspace
  sessionAffinity:
    # Whether to enable session affinity or not
    enabled: false
    # The session duration in seconds
    timeoutSeconds: 86400

  # Ingress
  # https://kubernetes.io/docs/concepts/services-networking/ingress/
  ingress:
    enabled: false

    # Whether ingress should be connected to NodePort Service
    # This is the requirement for GKE load balancer ingresses
    # https://cloud.google.com/kubernetes-engine/docs/concepts/ingress
    nodePortSvc: true

    annotations: [ ]

    tls: [ ]
    hosts: [ ]

  # Extra flags to pass to the node
  extraFlags:
    - "--syncmode=light"

  # Vertical Pod Autoscaler config
  # Ref: https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler
  verticalAutoscaler:
    # If true a VPA object will be created for the StatefulSet
    enabled: false
    updateMode: Off
    containerPolicies: { }

  # Configure resource requests and limits.
  # http://kubernetes.io/docs/user-guide/compute-resources/
  resources: { }

  # If false, data ownership will not be reset at startup
  # This allows the geth node to be run with an arbitrary user
  initChownData: true

  # Whether or not to allocate persistent volume disk for the data directory.
  # In case of node failure, the node data directory will still persist.
  persistence:
    enabled: true
    storageClassName: ""
    accessModes:
      - ReadWriteOnce
    size: 20Gi

  # Affinity Settings
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: { }

  # Toleration Settings
  # https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  tolerations: [ ]

  # used to assign priority to pods
  # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  priorityClassName: ""

# Genesis configuration
genesis: { }
