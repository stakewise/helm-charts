{{- if .Values.validator.enabled }}
{{- $root := . -}}
{{- range (untilStep 0 (int .Values.validator.replicas) 1) }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "node-operator.fullname" $root }}-validator-{{.}}
  labels:
    {{- include "node-operator.labels" $root | nindent 4 }}
    {{- include "validator.labels" $root | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "node-operator.selectorLabels" $root | nindent 6 }}
      {{- include "validator.labels" $root | nindent 6 }}
  serviceName: {{ template "node-operator.fullname" $root }}
  template:
    metadata:
      labels:
        {{- include "node-operator.selectorLabels" $root | nindent 8 }}
        {{- include "validator.labels" $root | nindent 8 }}
      annotations:
        checksum/secret: {{ include (print $root.Template.BasePath "/validator/secret.yaml") $root | sha256sum }}
        checksum/configmap: {{ include (print $root.Template.BasePath "/validator/configmap.yaml") $root | sha256sum }}
    spec:
    {{- with $root.Values.validator.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ . }}
    {{- end }}
    {{- with $root.Values.validator.affinity }}
      affinity:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
    {{- with $root.Values.validator.tolerations }}
      tolerations:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
    {{- with $root.Values.validator.nodeSelector }}
      nodeSelector:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
    {{- with $root.Values.securityContext }}
      securityContext:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
      serviceAccountName: {{ template "node-operator.fullname" $root }}
      priorityClassName: {{ $root.Values.validator.priorityClassName | quote }}
      initContainers:
        {{- include "init-validator" $root | nindent 8 }}
      {{- if and $.Values.validator.persistence.enabled $.Values.validator.initChownData }}
        {{- include "init-chown" $root | nindent 8 }}
      {{- end }}
      containers:
        - name: validator
          image: "{{ (pluck $root.Values.validator.type $root.Values.validator.image | first ).repository }}:{{ (pluck $root.Values.validator.type $root.Values.validator.image | first ).tag }}"
          imagePullPolicy: {{ $root.Values.validator.image.pullPolicy }}
          args:  
          {{- range (pluck $root.Values.validator.type $root.Values.validator.flags | first) }}
            - {{ . | quote }}
          {{- end -}}
          {{- range (pluck $root.Values.validator.type $root.Values.validator.extraFlags | first) }}
            - {{ . | quote }}
          {{- end -}}
          {{- include "beacon-rpc-node" $ | nindent 12 }}
          {{- include "validator-graffiti" $ | nindent 12 }}
          {{- if $root.Values.validator.metrics.enabled }}
            {{- range (pluck $root.Values.validator.type $root.Values.validator.metrics.flags | first) }}
            - {{ . | quote }}
            {{- end }}
          {{- end }}
        {{- if $root.Values.validator.metrics.enabled }}
          ports:
            - containerPort: {{ $root.Values.validator.metrics.port }}
              name: metrics
              protocol: TCP
        {{- end }}
        {{- with $root.Values.validator.resources }}
          resources:
            {{ toYaml . | nindent 16 | trim }}
        {{- end }}
          volumeMounts:
            - name: data
              mountPath: /data
            - name: configs
              mountPath: "/mnt/configs"
            - name: secrets
              mountPath: "/mnt/secrets"
            - name: vault-secrets
              mountPath: "/mnt/vault"
        {{- with (pluck $root.Values.validator.type $root.Values.validator.readinessProbe | first) }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
        {{- end }}
        {{- with (pluck $root.Values.validator.type $root.Values.validator.livenessProbe | first) }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
        {{- end }}
      volumes:
        - name: configs
          configMap:
            name: {{ template "node-operator.fullname" $root }}-validator-configs
        - name: secrets
          secret:
            secretName: {{ template "node-operator.fullname" $root }}-validator-secrets
        - name: validator-init
          configMap:
            name: {{ template "node-operator.fullname" $root }}-validator-init
        - name: vault-secrets
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "{{ template "node-operator.fullname" $root }}-validator-secrets"
{{- if (not $root.Values.validator.persistence.enabled) }}
        - name: data
          emptyDir: {}
{{- else }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          {{- include "validator.labels" $root | nindent 10 }}
      spec:
        accessModes: {{ $root.Values.validator.persistence.accessModes }}
        storageClassName: {{ $root.Values.validator.persistence.storageClassName }}
        resources:
          requests:
            storage: {{ $root.Values.validator.persistence.size | quote }}
{{- end }}

{{- end }}
{{- end }}
