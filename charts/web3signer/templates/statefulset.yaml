apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
kind: StatefulSet
metadata:
  name: {{ include "common.names.fullname" . }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
  serviceName: {{ include "common.names.fullname" . }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "common.labels.matchLabels" . | nindent 8 }}
    spec:
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "web3signer.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: init
          image: "{{ .Values.initImage.registry }}/{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
          imagePullPolicy: {{ .Values.initImage.pullPolicy }}
          securityContext:
            runAsUser: 0
          command:
            - sh
            - -ac
            - >
              mkdir -p /data/web3signer /data/keystore;
              chown -R {{ .Values.podSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }} /data/web3signer
          volumeMounts:
            - name: data
              mountPath: /data
        - name: fetch-keys
          image: "{{ .Values.cliImage.registry }}/{{ .Values.cliImage.repository }}:{{ .Values.cliImage.tag }}"
          imagePullPolicy: {{ .Values.cliImage.pullPolicy }}
          command:
            - python
          args:
            - src/main.py
            - remote-db
            - --network
          {{ if eq .Values.global.network "prater"}}
            - goerli
          {{- else }}
            - {{ .Values.global.network }}
          {{- end }}
            - --db-url
            - {{ .Values.dbKeystoreUrl }}
            - --vault
            - {{ lower .Values.global.vault }}
            - setup-web3signer
            - --encrypt-key
            - {{ .Values.decryptionKey }}
            - --output-dir
            - /data/keystore
          securityContext:
            runAsUser: 0
          env:
            - name: PYTHONPATH
              value: "."
          envFrom:
            - secretRef:
                name: {{ include "common.names.fullname" . }}
          volumeMounts:
            - name: data
              mountPath: /data
        - name: migrations
          image: "{{ .Values.flywayImage.registry }}/{{ .Values.flywayImage.repository }}:{{ .Values.flywayImage.tag }}"
          imagePullPolicy: {{ .Values.flywayImage.pullPolicy }}
          securityContext:
            runAsUser: 0
          args:
            - -user={{ .Values.dbUsername }}
            - -password={{ .Values.dbPassword }}
            - -url={{ .Values.dbUrl }}
            - migrate
          volumeMounts:
            - name: migrations
              mountPath: /flyway/sql
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - --config-file=/config/config.yaml
            - eth2
          {{- range .Values.extraFlags }}
            - {{ . | quote }}
          {{- end }}
          env:
            - name: JAVA_OPTS
              value: {{ .Values.web3signerJavaOpts | quote }}
          ports:
            - name: http
              containerPort: {{ .Values.httpPort }}
              protocol: TCP
            - name: metrics
              containerPort: {{ .Values.metricsPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /upcheck
              port: http
            initialDelaySeconds: 900
            timeoutSeconds: 3
            periodSeconds: 30
            failureThreshold: 3
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /upcheck
              port: http
            initialDelaySeconds: 60
            timeoutSeconds: 3
            periodSeconds: 30
            failureThreshold: 3
            successThreshold: 1
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config
              mountPath: /config
      volumes:
        - name: config
          secret:
            secretName: {{ include "common.names.fullname" . }}-config
        - name: migrations
          configMap:
            name: {{ include "common.names.fullname" . }}-migrations
        - name: data
          emptyDir:
            medium: Memory
            sizeLimit: 128Mi