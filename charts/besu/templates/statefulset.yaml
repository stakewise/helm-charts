---
kind: StatefulSet
apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
metadata:
  name: {{ include "common.names.fullname" . }}
  labels:
    {{- include "common.labels.statefulset" . | nindent 4 }}
spec:
  replicas: {{ .Values.global.replicaCount }}
  podManagementPolicy: "Parallel"
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
  serviceName: {{ include "common.names.fullname" . }}
  template:
    metadata:
      labels:
        {{- include "common.labels.matchLabels" . | nindent 8 }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
    {{- with (concat .Values.imagePullSecrets .Values.global.imagePullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
    {{- end }}
      serviceAccountName: {{ include "common.names.serviceAccountName" . }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      initContainers:
        - name: init
          image: "{{ .Values.initImage.registry }}/{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
          imagePullPolicy: {{ .Values.initImage.pullPolicy }}
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          command:
            - sh
            - -c
            - >
              echo "Namespace: ${POD_NAMESPACE} Pod: ${POD_NAME}";
        {{- if .Values.p2pNodePort.enabled }}
          {{- if eq .Values.p2pNodePort.type "LoadBalancer" }}
              until [ -n "$(kubectl -n ${POD_NAMESPACE} get svc/${POD_NAME} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" ]; do echo "Waiting for load balancer gets an IP" && sleep 10; done;
              export EXTERNAL_PORT=$(kubectl -n ${POD_NAMESPACE} get services -l "pod in (${POD_NAME}), type in (p2p)" -o jsonpath='{.items[0].spec.ports[0].nodePort}');
              export EXTERNAL_IP=$(kubectl -n ${POD_NAMESPACE} get svc/${POD_NAME} -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
          {{- else }}
              export EXTERNAL_PORT=$(kubectl get services -l "pod in (${POD_NAME}), type in (p2p)" -o jsonpath='{.items[0].spec.ports[0].nodePort}');
              export EXTERNAL_IP=$(kubectl get nodes "${NODE_NAME}" -o jsonpath='{.status.addresses[?(@.type=="ExternalIP")].address}');
          {{- end }}
              echo "BESU_P2P_HOST=$EXTERNAL_IP" >  /env/init;
              echo "BESU_P2P_PORT=$EXTERNAL_PORT" >>  /env/init;
        {{- else }}
              echo "BESU_P2P_HOST=$(POD_IP)" >  /env/init;
              echo "BESU_P2P_PORT={{ include "besu.p2pPort" . }}" >>  /env/init;
        {{- end }}
              cat /env/init;
          {{- if and .Values.persistence.enabled .Values.initChownData }}
              mkdir -p /data && chown -R {{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.runAsUser }} /data;
          {{- end }}
          volumeMounts:
            - name: env
              mountPath: /env
            - name: data
              mountPath: /data
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - sh
            - -ac
            - >
              . /env/init;
              exec /opt/besu/bin/besu
              --network={{ .Values.global.network }}
              --data-path=/data
              --sync-mode={{ .Values.syncMode }}
              --p2p-enabled=true
              --host-allowlist={{ .Values.restApi.hostAllowList | join "," }}
            {{- if .Values.restApi.enabled }}
              --rpc-http-enabled={{ .Values.restApi.enabled }}
              --rpc-http-host={{ .Values.restApi.host }}
              --rpc-http-port={{ .Values.restApi.port }}
              --rpc-http-cors-origins={{ .Values.restApi.corsOrigins | join "," }}
            {{- end }}
            {{- if .Values.engineRpc.enabled }}
              --engine-rpc-enabled={{ .Values.engineRpc.enabled }}
              --engine-host-allowlist={{ .Values.engineRpc.hostAllowList | join "," }}
              --engine-jwt-secret=/secret/jwtsecret
              --engine-rpc-port={{ .Values.engineRpc.port | join "," }}
            {{- end }}
            {{- if .Values.global.metrics.enabled }}
              --metrics-enabled={{ .Values.global.metrics.enabled }}
              --metrics-host={{ .Values.metrics.host }}
              --metrics-port={{ .Values.metrics.port }}
            {{- end }}
            {{- range .Values.extraFlags }}
              {{ . | quote }}
            {{- end }}
        {{- if or .Values.restApi.enabled .Values.global.metrics.enabled }}
          env:
          {{- if .Values.javaOpts.enabled }}
            - name: BESU_OPTS
              value: {{ .Values.javaOpts.maxHeapSize }}
          {{- end }}
          ports:
          {{- if .Values.restApi.enabled }}
            - name: {{ .Values.restApi.portName }}
              containerPort: {{ .Values.restApi.port }}
              protocol: TCP
          {{- end }}
          {{- if .Values.engineRpc.enabled }}
            - name: {{ .Values.engineRpc.portName }}
              containerPort: {{ .Values.engineRpc.port }}
              protocol: TCP
          {{- end }}
          {{- if .Values.global.metrics.enabled }}
            - name: metrics
              containerPort: {{ .Values.metrics.port }}
              protocol: TCP
          {{- end }}
          {{- if .Values.p2pNodePort.enabled }}
            - name: p2p-tcp
              containerPort: {{ include "besu.p2pPort" . }}
              protocol: TCP
            - name: p2p-udp
              containerPort: {{ include "besu.p2pPort" . }}
              protocol: UDP
          {{- end }}
        {{- end }}
          volumeMounts:
            - name: data
              mountPath: /data
            - name: jwtsecret
              mountPath: /secret
              readOnly: true
            - name: env
              mountPath: /env
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        {{- if or .Values.global.livenessProbe.enabled .Values.livenessProbe.enabled }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            httpGet:
              path: /liveness
              port: {{ .Values.restApi.portName }}
              scheme: HTTP
        {{- end }}
        {{- if or .Values.global.readinessProbe.enabled .Values.readinessProbe.enabled }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            httpGet:
              path: /readiness?minPeers=15&maxBlocksBehind=10
              port: {{ .Values.restApi.portName }}
              scheme: HTTP
        {{- end }}
      volumes:
        - name: jwtsecret
          secret:
            secretName: {{ include "common.names.fullname" . }}
        - name: env
          emptyDir: {}
  {{- if (not .Values.persistence.enabled) }}
        - name: data
          emptyDir: {}
  {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          {{- include "common.labels.statefulset" . | nindent 10 }}
      {{- with .Values.persistence.annotations }}
        annotations:
          {{ toYaml . | nindent 10 | trim }}
      {{- end }}
      spec:
        accessModes: {{ .Values.persistence.accessModes }}
        storageClassName: {{ .Values.persistence.storageClassName }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
  {{- end }}
