{{- $root := . -}}
{{- range $i, $e := until (len .Values.global.executionEndpoints) }}
---
kind: StatefulSet
apiVersion: {{ include "common.capabilities.statefulset.apiVersion" $root }}
metadata:
  name: {{ include "common.names.fullname" $root }}-{{ $i }}
  labels:
    {{- include "common.labels.standard" $root | nindent 4 }}
    replicaID: {{ $i | quote }}
spec:
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" $root | nindent 6 }}
      replicaID: {{ $i | quote }}
  serviceName: {{ include "common.names.fullname" $root }}
  replicas: 1
  template:
    metadata:
      labels:
        {{- include "common.labels.matchLabels" $root | nindent 8 }}
        replicaID: {{ $i | quote }}
    spec:
    {{- with (concat $root.Values.imagePullSecrets $root.Values.global.imagePullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with $root.Values.affinity }}
      affinity:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
    {{- with $root.Values.tolerations }}
      tolerations:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
    {{- with $root.Values.nodeSelector }}
      nodeSelector:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
    {{- with $root.Values.securityContext }}
      securityContext:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
      serviceAccountName: {{ include "common.names.fullname" $root }}
      priorityClassName: {{ $root.Values.priorityClassName | quote }}
      initContainers:
        - name: init
          image: "{{ $root.Values.p2pNodePort.initContainer.image.repository }}:{{ $root.Values.p2pNodePort.initContainer.image.tag }}"
          imagePullPolicy: {{ $root.Values.p2pNodePort.initContainer.image.pullPolicy }}
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          command:
            - sh
            - -c
            - >
              echo "Namespace: ${POD_NAMESPACE} Pod: ${POD_NAME}";
          {{- if $root.Values.p2pNodePort.enabled }}
              {{- if eq $root.Values.p2pNodePort.type "LoadBalancer" }}
              until [ -n "$(kubectl -n ${POD_NAMESPACE} get svc/${POD_NAME} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" ]; do echo "Waiting for load balancer gets an IP" && sleep 10; done;
              export EXTERNAL_PORT=$(kubectl -n ${POD_NAMESPACE} get services -l "pod in (${POD_NAME}), type in (p2p)" -o jsonpath='{.items[0].spec.ports[0].nodePort}');
              export EXTERNAL_IP=$(kubectl -n ${POD_NAMESPACE} get svc/${POD_NAME} -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
              {{- else }}
              export EXTERNAL_PORT=$(kubectl get services -l "pod in (${POD_NAME}), type in (p2p)" -o jsonpath='{.items[0].spec.ports[0].nodePort}');
              export EXTERNAL_IP=$(kubectl get nodes "${NODE_NAME}" -o jsonpath='{.status.addresses[?(@.type=="ExternalIP")].address}');
              {{- end }}
              echo "p2p-host-ip: $EXTERNAL_IP"   > /config/config.yaml;
              echo "p2p-tcp-port: $EXTERNAL_PORT" >>  /config/config.yaml;
              echo "p2p-udp-port: $EXTERNAL_PORT" >>  /config/config.yaml;
          {{- else }}
              echo "p2p-host-ip: $POD_IP"   > /config/config.yaml;
              echo 'p2p-tcp-port: {{ include "prysm.p2pPort" $root }}' >>  /config/config.yaml;
              echo 'p2p-udp-port: {{ include "prysm.p2pPort" $root }}' >>  /config/config.yaml;
          {{- end }}
              cat /config/config.yaml;
          {{- if and $root.Values.persistence.enabled $root.Values.initChownData }}
              chown -R {{ $root.Values.securityContext.runAsUser }}:{{ $root.Values.securityContext.runAsUser }} /data;
          {{- end }}
          volumeMounts:
            - name: config
              mountPath: /config
            - name: data
              mountPath: /data
      {{- if or (eq $root.Values.global.network "prater") (eq $root.Values.global.network "ropsten") (eq $root.Values.global.network "sepolia") }}
        - name: download-genesis-state
          image: "curlimages/curl:latest"
          imagePullPolicy: {{ $root.Values.initImage.pullPolicy }}
          command: ['/bin/sh', '/data/scripts/entrypoint.sh']
          volumeMounts:
            - name: data
              mountPath: /data
            - name: scripts
              mountPath: /data/scripts
      {{- end }}
      containers:
        - name: {{ include "common.names.fullname" $root }}
        {{- if ne $root.Values.global.network "gnosis" }}
          image: "{{ $root.Values.image.repository }}:{{ $root.Values.image.tag }}"
          imagePullPolicy: {{ $root.Values.image.pullPolicy }}
        {{- else }}
          image: "{{ $root.Values.imageGnosis.repository }}:{{ $root.Values.imageGnosis.tag }}"
          imagePullPolicy: {{ $root.Values.imageGnosis.pullPolicy }}
        {{- end }}
          args:
            - "--datadir=/data"
            - "--rpc-host={{ $root.Values.rpc.host }}"
            - "--rpc-port={{ $root.Values.rpc.port }}"
            - "--accept-terms-of-use"
            - "--config-file=/config/config.yaml"
            - "--http-web3provider={{ index $root.Values.global.executionEndpoints $i }}"
            - "--jwt-secret=/secret/jwtsecret"
          {{- if $root.Values.httpMevRelay }}
            - "--http-mev-relay={{ $root.Values.httpMevRelay }}"
          {{- end }}

          {{- if $root.Values.suggestedFeeRecipient }}
            - "--suggested-fee-recipient={{ $root.Values.suggestedFeeRecipient }}"
          {{- end }}

          {{- if $root.Values.totalDifficultyOverride }}
            - "--terminal-total-difficulty-override={{ $root.Values.totalDifficultyOverride }}"
          {{- end }}

          {{- if or (eq $root.Values.global.network "prater") (eq $root.Values.global.network "ropsten") (eq $root.Values.global.network "sepolia") }}
            - "--genesis-state=/data/genesis.ssz"
          {{- end }}

          {{- if ne $root.Values.global.network "gnosis" }}
            - "--{{ $root.Values.global.network }}"
          {{- else }}
            - "--contract-deployment-block=19469077"
            - "--bootstrap-node=/data/gnosis-config/bootnodes.yaml"
            - "--config-file=/data/gnosis-config/config.yaml"
            - "--chain-config-file=/data/gnosis-config/config.yaml"
          {{- end }}

          {{- range $root.Values.extraFlags }}
            - {{ . | quote }}
          {{- end }}

          {{- if $root.Values.metrics.enabled }}
            - "--monitoring-port={{ $root.Values.metrics.port }}"
            - "--monitoring-host=0.0.0.0"
          {{- else }}
            - "--disable-monitoring"
          {{- end }}

          {{- if $root.Values.http.enabled }}
            - "--grpc-gateway-host=0.0.0.0"
            - "--grpc-gateway-port={{ $root.Values.http.port }}"
          {{- else }}
            - "--disable-grpc-gateway"
          {{- end }}
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
            - containerPort: {{ $root.Values.rpc.port }}
              name: {{ $root.Values.rpc.portName }}
              protocol: TCP
          {{- if $root.Values.p2pNodePort.enabled }}
            - name: p2p-tcp
              containerPort: {{ include "prysm.p2pPort" $root }}
              protocol: TCP
            - name: p2p-udp
              containerPort: {{ include "prysm.p2pPort" $root }}
              protocol: UDP
          {{- end }}
          {{- if $root.Values.http.enabled }}
            - containerPort: {{ $root.Values.http.port }}
              name: http
              protocol: TCP
          {{- end }}
          {{- if $root.Values.metrics.enabled }}
            - containerPort: {{ $root.Values.metrics.port }}
              name: metrics
              protocol: TCP
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /data
            - name: jwtsecret
              mountPath: /secret
              readOnly: true
            - name: config
              mountPath: /config
          {{- if eq $root.Values.global.network "gnosis" }}
            - name: gnosis-config
              mountPath: /data/gnosis-config
          {{- end }}
        {{- with $root.Values.resources }}
          resources:
            {{ toYaml . | nindent 12 | trim }}
        {{- end }}
      {{- if $root.Values.http.enabled }}
        - name: sidecar
          image: "{{ $root.Values.sidecar.repository }}:{{ $root.Values.sidecar.tag }}"
          imagePullPolicy: {{ $root.Values.sidecar.pullPolicy }}
          env:
            - name: SERVER_BINDADDR
              value: "{{ $root.Values.sidecar.bindAddr }}:{{ $root.Values.sidecar.bindPort }}"
            - name: CLIENT_PORT
              value: {{ $root.Values.http.port | quote }}
          ports:
            - containerPort: {{ $root.Values.sidecar.bindPort }}
              name: sidecar
              protocol: TCP
        {{- if or $root.Values.global.livenessProbe.enabled $root.Values.livenessProbe.enabled }}
          livenessProbe:
            initialDelaySeconds: {{ $root.Values.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ $root.Values.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ $root.Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ $root.Values.livenessProbe.failureThreshold }}
            successThreshold: {{ $root.Values.livenessProbe.successThreshold }}
            httpGet:
              path: {{ $root.Values.livenessProbe.httpGet.path }}
              port: {{ $root.Values.livenessProbe.httpGet.port }}
              scheme: {{ $root.Values.livenessProbe.httpGet.scheme }}
        {{- end }}
        {{- if or $root.Values.global.readinessProbe.enabled $root.Values.readinessProbe.enabled }}
          readinessProbe:
            initialDelaySeconds: {{ $root.Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ $root.Values.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ $root.Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ $root.Values.readinessProbe.failureThreshold }}
            successThreshold: {{ $root.Values.readinessProbe.successThreshold }}
            httpGet:
              path: {{ $root.Values.readinessProbe.httpGet.path }}
              port: {{ $root.Values.readinessProbe.httpGet.port }}
              scheme: {{ $root.Values.readinessProbe.httpGet.scheme }}
        {{- end }}
      {{- end }}
      volumes:
        - name: jwtsecret
          secret:
            secretName: {{ include "common.names.fullname" $root }}
        - name: config
          emptyDir: {}
      {{- if eq $root.Values.global.network "gnosis" }}
        - name: gnosis-config
          configMap:
            name: {{ include "common.names.fullname" $root }}-gnosis
      {{- end }}
      {{- if or (eq $root.Values.global.network "prater") (eq $root.Values.global.network "ropsten") (eq $root.Values.global.network "sepolia") }}
        - name: scripts
          configMap:
            name: {{ include "common.names.fullname" $root }}
      {{- end }}
{{- if (not $root.Values.persistence.enabled) }}
        - name: data
          emptyDir: {}
{{- else }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          {{- include "common.labels.standard" $root | nindent 10 }}
      {{- with $root.Values.persistence.annotations }}
        annotations:
          {{ toYaml . | nindent 10 | trim }}
      {{- end }}
      spec:
        accessModes: {{ $root.Values.persistence.accessModes }}
        storageClassName: {{ $root.Values.persistence.storageClassName }}
        resources:
          requests:
            storage: {{ $root.Values.persistence.size | quote }}
{{- end }}

{{- end }}
