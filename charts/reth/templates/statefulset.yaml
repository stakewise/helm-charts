---
apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
kind: StatefulSet
metadata:
  name: {{ include "common.names.fullname" . }}
  labels:
    {{- include "common.labels.statefulset" . | nindent 4 }}
spec:
  replicas: {{ .Values.global.replicaCount }}
  podManagementPolicy: "Parallel"
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
  serviceName: {{ include "common.names.fullname" . }}
  template:
    metadata:
      labels:
        {{- include "common.labels.matchLabels" . | nindent 8 }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
    {{- with (concat .Values.imagePullSecrets .Values.global.imagePullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
    {{- with .Values.securityContext }}
      securityContext:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
    {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
    {{- end }}
      serviceAccountName: {{ include "common.names.serviceAccountName" . }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      initContainers:
        - name: init
          image: "{{ .Values.initImage.registry }}/{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
          imagePullPolicy: {{ .Values.initImage.pullPolicy }}
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          command:
            - sh
            - -c
            - >
              echo "Namespace: ${POD_NAMESPACE} Pod: ${POD_NAME}";
          {{- if .Values.p2pNodePort.enabled }}
            {{- if eq .Values.p2pNodePort.type "LoadBalancer" }}
              until [ -n "$(kubectl -n ${POD_NAMESPACE} get svc/${POD_NAME} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" ]; do echo "Waiting for load balancer gets an IP" && sleep 10; done;
              export EXTERNAL_PORT=$(kubectl -n ${POD_NAMESPACE} get services -l "pod in (${POD_NAME}), type in (p2p)" -o jsonpath='{.items[0].spec.ports[0].nodePort}');
              export EXTERNAL_IP=$(kubectl -n ${POD_NAMESPACE} get svc/${POD_NAME} -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
            {{- else }}
              export EXTERNAL_PORT=$(kubectl get services -l "pod in (${POD_NAME}), type in (p2p)" -o jsonpath='{.items[0].spec.ports[0].nodePort}');
              export EXTERNAL_IP=$(kubectl get nodes "${NODE_NAME}" -o jsonpath='{.status.addresses[?(@.type=="ExternalIP")].address}');
            {{- end }}
              echo "EXTERNAL_PORT=$EXTERNAL_PORT" >  /env/init-nodeport;
              echo "EXTERNAL_IP=$EXTERNAL_IP"     >> /env/init-nodeport;
              cat /env/init-nodeport;
          {{- end }}
          {{- if and .Values.persistence.enabled .Values.initChownData }}
              mkdir -p /data && chown -R {{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.runAsUser }} /data;
          {{- end }}
          volumeMounts:
            - name: env-nodeport
              mountPath: /env
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - sh
            - -ac
            - >
            {{- if .Values.p2pNodePort.enabled }}
              . /env/init-nodeport;
            {{- end }}
              exec /usr/local/bin/reth
              node
          {{- if .Values.global.JWTSecret }}
              --authrpc.jwtsecret=/secret/jwtsecret
              --authrpc.addr={{ .Values.authRpc.addr }}
              --authrpc.port={{ .Values.authRpc.port }}
          {{- end }}
          {{- if .Values.http.enabled }}
              --http
              --http.addr=0.0.0.0
              --http.port={{ .Values.http.port }}
              --http.corsdomain={{ .Values.http.corsDomain }}
              --http.api={{ .Values.http.api }}
          {{- end }}
          {{- if .Values.p2pNodePort.enabled }}
              --nat=extip:$EXTERNAL_IP
              --port=$EXTERNAL_PORT
          {{- else }}
              --nat=extip:$(POD_IP)
              --port={{ include "reth.p2pPort" . }}
          {{- end }}
          {{- if .Values.ws.enabled }}
              --ws
              --ws.addr=0.0.0.0
              --ws.port={{ .Values.ws.port }}
              --ws.origins={{ .Values.ws.origins }}
              --ws.api={{ .Values.ws.api }}
          {{- end }}
              --datadir=/data/ethereum
              --chain={{ .Values.global.network }}
          {{- range .Values.extraFlags }}
              {{ . | quote }}
          {{- end }}
          {{- if .Values.global.metrics.enabled }}
          {{- range .Values.metrics.flags }}
              {{ . | quote }}
          {{- end }}
          {{- end }}
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
          {{- if .Values.global.JWTSecret }}
            - name: authrpc
              containerPort: {{ .Values.authRpc.port }}
          {{- end }}
          {{- if .Values.http.enabled }}
            - name: http
              containerPort: {{ .Values.http.port }}
          {{- end }}
          {{- if .Values.ws.enabled }}
            - name: ws
              containerPort: {{ .Values.ws.port }}
          {{- end }}
          {{- if .Values.global.metrics.enabled }}
            - name: metrics
              containerPort: {{ .Values.metrics.port }}
          {{- end }}
          {{- if .Values.p2pNodePort.enabled }}
            - name: p2p-tcp
              containerPort: {{ include "reth.p2pPort" . }}
              protocol: TCP
            - name: p2p-udp
              containerPort: {{ include "reth.p2pPort" . }}
              protocol: UDP
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /data/ethereum
          {{- if .Values.global.JWTSecret }}
            - name: jwtsecret
              mountPath: /secret
              readOnly: true
          {{- end }}
            - name: env-nodeport
              mountPath: /env
        {{- with .Values.resources }}
          resources:
            {{ toYaml . | nindent 12 | trim }}
        {{- end }}
      {{- if .Values.http.enabled }}
        - name: sidecar
          image: "{{ .Values.sidecar.registry }}/{{ .Values.sidecar.repository }}:{{ .Values.sidecar.tag }}"
          imagePullPolicy: {{ .Values.sidecar.pullPolicy }}
          env:
            - name: SERVER_BINDADDR
              value: "{{ .Values.sidecar.bindAddr }}:{{ .Values.sidecar.bindPort }}"
            - name: CLIENT_PORT
              value: {{ .Values.http.port | quote }}
          ports:
            - containerPort: {{ .Values.sidecar.bindPort }}
              name: sidecar
              protocol: TCP
        {{- if or .Values.global.livenessProbe.enabled .Values.livenessProbe.enabled }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            httpGet:
              path: {{ .Values.livenessProbe.httpGet.path }}
              port: {{ .Values.livenessProbe.httpGet.port }}
              scheme: {{ .Values.livenessProbe.httpGet.scheme }}
        {{- end }}
        {{- if or .Values.global.readinessProbe.enabled .Values.readinessProbe.enabled }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            httpGet:
              path: {{ .Values.readinessProbe.httpGet.path }}
              port: {{ .Values.readinessProbe.httpGet.port }}
              scheme: {{ .Values.readinessProbe.httpGet.scheme }}
        {{- end }}
      {{- end }}
      volumes:
        {{- if .Values.global.JWTSecret }}
        - name: jwtsecret
          secret:
            secretName: {{ include "common.names.fullname" . }}
        {{- end }}
        - name: env-nodeport
          emptyDir: {}
{{- if (not .Values.persistence.enabled) }}
        - name: data
          emptyDir: {}
{{- else }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          {{- include "common.labels.statefulset" . | nindent 10 }}
      {{- with .Values.persistence.annotations }}
        annotations:
          {{ toYaml . | nindent 10 | trim }}
      {{- end }}
      spec:
        accessModes: {{ .Values.persistence.accessModes }}
        storageClassName: {{ .Values.persistence.storageClassName }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
{{- end }}
