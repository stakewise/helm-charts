global:
  serviceAccount:
    create: true

## Common configuration for all the containers (server.common_conf)
##
commonConf:
  environment: "staging"
  secretKey: ""
  ## Possible values: goerli, perm_goerli, gnosis, mainnet, harbour_goerli, harbour_mainnet
  ##
  enabledNetworks: "goerli,perm_goerli,gnosis,mainnet,harbour_goerli,harbour_mainnet"

  poolPage: "https://app.stakewise.io"
  soloPage: "https://app.stakewise.io/solo"
  stakingAprSamplesCount: "3"

  validatorMaxPenaltyCount: "2"

  sendEmails: "False"
  ## Change to https://api.mailgun.net/v3
  ## if you are using Mailgunâ€™s US region
  ##
  mailgunApiUrl: "https://api.eu.mailgun.net/v3"
  mailgunApiKey: ""
  mailgunSenderDomain: "mail.stakewise.io"
  defaultFromEmail: '"Stakewise" <no-reply@mail.stakewise.io>'
  managers: ""

  sentryDsn: ""
  memcachedUrl: ""

  staticUrl: "https://static.stakewise.io/"

  sendTelegramNotifications:
    mainnet: "False"
    goerli: "False"
    permGoerli: "False"
    gnosis: "False"
    harbourGoerli: "False"
    harbourMainnet: "False"

  telegramToken: ""
  telegramChatId: ""
  multisigOwnersTelegramToken: ""
  multisigOwnersTelegramChatId: ""

image:
  registry: "europe-west4-docker.pkg.dev"
  repository: "stakewiselabs/private/backend"
  tag: "v2.5.13"
  pullPolicy: IfNotPresent
  pullSecrets: [ ]

serviceAccount:
  ## Annotations to add to the service account
  ##
  annotations: {}

admin:
  ## Whether to deploy admin or not.
  ##
  enabled: true

  ## Admin configuration parameters.
  ##
  conf:
    allowedHosts: ""

  ## How many admin pods to run simultaneously.
  ##
  replicas: 1

  ## Enable pod disruption budget.
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1

  ## Create an admin user if needed.
  ##
  user:
    create: false
    username: "username"
    password: "password"
    email: "user@example.com"

  ## "Host" Header value to pass with the request for Host verification.
  ##
  probesHostHeader: ""

  serviceType: ClusterIP
  servicePort: "8000"

  ## Configure ingress
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress:
    enabled: false
    className: ""
    annotations: {}
    tls: []
    path: "/admin"
    hosts: []

  ## Configure resource requests and limits.
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      cpu: 100m
      memory: 512Mi
    limits:
      cpu: 300m
      memory: 1024Mi

  ## Pod Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ##
  securityContext:
    fsGroup: 65534
    runAsUser: 65534

  ## Tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []

  ## Affinity for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}

  ## used to assign priority to pods
  ## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  ##
  priorityClassName: ""

api:
  ## Whether to deploy api or not.
  ##
  enabled: true

  ## API configuration parameters.
  ##
  conf:
    allowedHosts: ""
    corsOriginWhitelist: ""
    corsAllowAllOrigins: "False"

    skipRecaptchaVerification: "False"
    recaptchaUrl: "https://www.google.com/recaptcha/api/siteverify"
    recaptchaSecret: ""
    recaptchaHostname: ""
    recaptchaContactAction: "contact"
    recaptchaContactScore: "0.5"
    recaptchaProfileAction: "profile"
    recaptchaProfileScore: "0.5"

  ## How many api pods to run simultaneously.
  ##
  replicas: 2

  ## Enable pod disruption budget.
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
  ##
  podDisruptionBudget:
    enabled: true
    maxUnavailable: 1

  ## "Host" Header value to pass with the request for Host verification.
  ##
  probesHostHeader: "api.stakewise.io"

  serviceType: ClusterIP
  servicePort: "8000"

  ## Configure ingress
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress:
    enabled: true
    className: ""
    annotations: {}
    tls: []
    path: "/"
    hosts: []

  ## Configure resource requests and limits.
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      cpu: 100m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1024Mi

  ## Pod Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ##
  securityContext:
    fsGroup: 65534
    runAsUser: 65534

  ## Tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []

  ## Affinity for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}

  ## used to assign priority to pods
  ## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  ##
  priorityClassName: ""

celery:
  priorityClassName: ""

  ## Pod Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ##
  securityContext:
    fsGroup: 65534
    runAsUser: 65534

  ## Tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []

  ## Affinity for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}

  ## How many celery worker pods to run simultaneously.
  ##
  workerReplicaCount: 3

  ## Configure resource requests and limits.
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  workerResources:
    requests:
      cpu: 1000m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1024Mi

  ## How many celery beat pods to run simultaneously.
  ##
  beatReplicaCount: 1

  ## Configure resource requests and limits.
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  beatResources:
    requests:
      cpu: 50m
      memory: 256Mi
    limits:
      cpu: 250m
      memory: 512Mi

  flower:
    ## How many celery flower pods to run simultaneously.
    ##
    replicaCount: 1

    ## Configure ingress
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
    ##
    ingress:
      enabled: true
      className: ""
      annotations: {}
      tls: []
      hosts: []
    port: "5555"
    user: ""
    password: ""
    
    ## Configure resource requests and limits.
    ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
    ##
    resources:
      requests:
        cpu: 50m
        memory: 256Mi
      limits:
        cpu: 250m
        memory: 512Mi

  conf:
    eth1Endpoints:
      ## Must also be provided in case goerli or perm_goerli network is enabled
      ##
      mainnet: ""
      goerli: ""
      permGoerli: ""
      gnosis: ""
      harbourGoerli: ""
      harbourMainnet: ""

    ## NB! only prysm client currently works
    ##
    eth2Endpoints:
      mainnet: ""
      goerli: ""
      permGoerli: ""
      gnosis: ""
      harbourGoerli: ""
      harbourMainnet: ""

    ## Graph
    ##
    stakewiseSubgraphUrls:
      mainnet: "https://graph.stakewise.io/subgraphs/name/stakewise/stakewise"
      goerli: "https://api.thegraph.com/subgraphs/name/stakewise/stakewise-goerli"
      permGoerli: "https://api.thegraph.com/subgraphs/name/stakewise/stakewise-perm-goerli"
      gnosis: "https://graph-gno.stakewise.io/subgraphs/name/stakewise/stakewise"
      harbourMainnet: "https://api.thegraph.com/subgraphs/name/stakewise/stakewise-harbour-mainnet"
      harbourGoerli: "https://api.thegraph.com/subgraphs/name/stakewise/stakewise-perm-goerli"
    uniswapV3SubgraphUrls:
      mainnet: "https://graph.stakewise.io/subgraphs/name/stakewise/uniswap-v3"
      goerli: "https://api.thegraph.com/subgraphs/name/stakewise/uniswap-v3-goerli"
    ethereumSubgraphUrls:
      mainnet: "https://graph.stakewise.io/subgraphs/name/stakewise/ethereum"
      goerli: "https://api.thegraph.com/subgraphs/name/stakewise/ethereum-goerli"
      permGoerli: "https://api.thegraph.com/subgraphs/name/stakewise/ethereum-goerli"
      gnosis: "https://graph-gno.stakewise.io/subgraphs/name/stakewise/ethereum"
      harbourMainnet: "https://api.thegraph.com/subgraphs/name/stakewise/ethereum-mainnet"
      harbourGoerli: "https://api.thegraph.com/subgraphs/name/stakewise/ethereum-goerli"

## Prometheus Service Monitor
## ref: https://github.com/coreos/prometheus-operator
##      https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
##
serviceMonitor:
  ## Create ServiceMonitor resource(s) for scraping metrics using PrometheusOperator
  ##
  enabled: false
  ## The namespace in which the ServiceMonitor will be created
  ##
  namespace: ""
  ## The interval at which metrics should be scraped
  ##
  interval: 30s
  ## The timeout after which the scrape is ended
  ##
  scrapeTimeout: ""
  ## Metrics RelabelConfigs to apply to samples before scraping.
  ##
  relabelings: []
  ## Metrics RelabelConfigs to apply to samples before ingestion.
  ##
  metricRelabelings: []
  ## Specify honorLabels parameter to add the scrape endpoint
  ##
  honorLabels: false
  ## Additional labels that can be used so ServiceMonitor resource(s) can be discovered by Prometheus
  ##
  additionalLabels: {}

cloudsqlProxy:
  enabled: false
  replicaCount: 1
  instance: ""
  serviceAccountKey: ""

postgresql:
  enabled: false

rabbitmq:
  enabled: true
  auth:
    username: "rabbitmq"
    password: "rabbitmq"
  persistence:
    enabled: false

memcached:
  enabled: true
  architecture: standalone
  auth:
    enabled: false