# Default values for oracle.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## Pod Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
##
securityContext:
  fsGroup: 1001
  runAsUser: 1001

## Termination Grace Period
## ref: https://kubernetes.io/docs/tasks/run-application/force-delete-stateful-set-pod/#delete-pods
##
terminationGracePeriodSeconds: 1800

## Affinity Settings
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: { }

## Toleration Settings
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
##
tolerations: [ ]

serviceAccount:
  ## Specifies whether a service account should be created
  ##
  create: true
  ## Annotations to add to the service account
  ##
  annotations: {}
  ## The name of the service account to use.
  ## If not set and create is true, a name is generated using the fullname template
  ##
  name: ""

## Docker image
##
image:
  repository: "europe-west4-docker.pkg.dev/stakewiselabs/public/oracle"
  tag: "v2.5.6"
  pullPolicy: IfNotPresent

## Credentials to fetch images from private registry
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
##
imagePullSecrets: []

## Configure resource requests and limits.
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  requests:
    cpu: 10m
    memory: 200Mi

## Used to assign priority to pod
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
##
priorityClassName: ""

settings:
  logLevel: "INFO"
  ## Possible values: goerli, perm_goerli, gnosis, mainnet
  ##
  enabledNetworks: "mainnet"

  eth1Endpoint:
    mainnet: ""
    goerli: ""
    permGoerli: ""
    gnosis: ""
    harbourMainnet: ""
    harbourKeeper: ""

  enableHealthServer: "False"
  healthServerHost: "0.0.0.0"
  healthServerPort: "8080"

  sentryDsn: ""

  ## Credentials
  ##
  oraclePrivateKey:
    mainnet: ""
    goerli: ""
    permGoerli: ""
    gnosis: ""
    harbourMainnet: ""
    harbourKeeper: ""

  awsRegion:
    mainnet: ""
    goerli: ""
    permGoerli: ""
    gnosis: ""
    harbourMainnet: ""
    harbourKeeper: ""
