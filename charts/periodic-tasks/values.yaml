# Default values for periodic-tasks.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: europe-west4-docker.pkg.dev/stakewiselabs/public/periodic-tasks
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v0.3.0"

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

## CronJobs
## Example:
## cronJobs:
##   - name: cronjob
##     image: busybox
##     arguments:
##       - /bin/sh
##       - -c
##       - "sleep 100"
##     schedule: "*/1 * * * *"
##     timeZone: "Europe/Moscow"
##     concurrencyPolicy: Forbid
##     suspend: false
##
cronJobs: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Application Configuration
env: []
  # - name: KEY
  #   value: value
  # - name: TOKEN
  #   valueFrom:
  #     secretKeyRef:
  #       name: my-secret
  #       key: my_secret_value

# Additional environment from configmap or secret
envFrom: []
  # - configMapRef:
  #     name: env-configmap
  # - secretRef:
  #     name: env-secrets

# Extra ConfigMaps that will be managed by the chart
# (You can use them with EnvFrom or some of the extraContainerVolumes values).
# The format for configmap data is "key/value" where
#    * key (can be templated) is the name of the configmap that will be created
#    * value: an object with the standard 'data' key.
#          The value associated with this keys must be a string (can be templated)
extraConfigMaps: {}
# eg:
# extraConfigMaps:
#   custom-config:
#     labels:
#       my.custom.label/v2: my_custom_label_value_2
#     data: |
#       config.json: |
#         {"key": "some data here in any format, e.g. json, yaml, toml, plaintext and so on"}
#       data.csv: |
#         column 1 name,column 2 name, column 3 name
#         first row data 1,first row data 2,first row data 3
#         second row data 1,second row data 2,second row data 3

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ 
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

#This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

## Prometheus Service Monitor
## ref: https://github.com/coreos/prometheus-operator
##      https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
##
serviceMonitor:
  enabled: false
  ## The namespace in which the ServiceMonitor will be created
  ##
  namespace: ""
  ## The interval at which metrics should be scraped
  ##
  interval: 30s
  ## The timeout after which the scrape is ended
  ##
  scrapeTimeout: ""
  ## Metrics RelabelConfigs to apply to samples before scraping.
  ##
  relabelings: []
  ## Metrics RelabelConfigs to apply to samples before ingestion.
  ##
  metricRelabelings: []
  ## Specify honorLabels parameter to add the scrape endpoint
  ##
  honorLabels: false
  ## Additional labels that can be used so ServiceMonitor resource(s) can be discovered by Prometheus
  ##
  additionalLabels: {}
