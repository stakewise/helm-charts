apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "validators.fullname" . }}-configs
  labels:
    {{- include "validators.labels" . | nindent 4 }}
  annotations:
    "helm.sh/resource-policy": keep
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
data:
  keymanageropts.json: |-
    {
        "direct_eip_version": "EIP-2335",
        "direct_version": "2"
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "validators.fullname" . }}-init
  labels:
    {{- include "validators.labels" . | nindent 4 }}
  annotations:
    "helm.sh/resource-policy": keep
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
data:
  validator-init.sh: |
    #!/bin/bash
    VAULT="/vault"
    VAULT_KEYSTORES="${VAULT}/keystores"
    VAULT_PASSWORD="${VAULT}/password.txt"
    DATA="/data"
    DATA_PRYSM="${DATA}/prysm"
    DATA_LIGHTHOUSE="${DATA}/lighthouse"
    DATA_TEKU="${DATA}/teku"
    SLASHING_PROTECTION_FILE="/data/slashing_protection.json"
    
    if [[ "${NETWORK_ID}" = "gnosis" ]] && [[ "${VALIDATOR_TYPE}" = "prysm" ]]; then
        PRYSM_EXECUTOR="prysm-gnosis-validator"
        PRYSM_EXTRA_FLAGS="--config-file /data/configs-gnosis-prysm/config.yaml --chain-config-file /data/configs-gnosis-prysm/config.yaml"
        PRYSM_IMPORT="${PRYSM_EXECUTOR} accounts import ${PRYSM_EXTRA_FLAGS} --keys-dir=${VAULT_KEYSTORES} --account-password-file=${VAULT_PASSWORD} --wallet-dir=${DATA_PRYSM}/validators --wallet-password-file=${VAULT_PASSWORD} --accept-terms-of-use"
        PRYSM_EXPORT_SLASHING_HISTORY="${PRYSM_EXECUTOR} slashing-protection-history export --accept-terms-of-use --datadir=${DATA_PRYSM} --slashing-protection-export-dir=${DATA}"
        PRYSM_IMPORT_SLASHING_HISTORY="${PRYSM_EXECUTOR} slashing-protection-history import --accept-terms-of-use --datadir=${DATA_PRYSM} --slashing-protection-json-file=${SLASHING_PROTECTION_FILE}"
    else
        PRYSM_EXECUTOR="prysm-validator"
        PRYSM_EXTRA_FLAGS="--${NETWORK_ID:-"mainnet"}"
        PRYSM_IMPORT="${PRYSM_EXECUTOR} accounts import ${PRYSM_EXTRA_FLAGS} --keys-dir=${VAULT_KEYSTORES} --account-password-file=${VAULT_PASSWORD} --wallet-dir=${DATA_PRYSM}/validators --wallet-password-file=${VAULT_PASSWORD} --accept-terms-of-use"
        PRYSM_EXPORT_SLASHING_HISTORY="${PRYSM_EXECUTOR} slashing-protection-history export --accept-terms-of-use --datadir=${DATA_PRYSM} --slashing-protection-export-dir=${DATA}"
        PRYSM_IMPORT_SLASHING_HISTORY="${PRYSM_EXECUTOR} slashing-protection-history import --accept-terms-of-use --${NETWORK_ID:-"mainnet"} --datadir=${DATA_PRYSM} --slashing-protection-json-file=${SLASHING_PROTECTION_FILE}"
        LIGHTHOUSE_EXECUTOR="lighthouse-validator"
        LIGHTHOUSE_EXTRA_FLAGS="--network=${NETWORK_ID:-"mainnet"} --datadir=${DATA_LIGHTHOUSE}"
        LIGHTHOUSE_IMPORT="${LIGHTHOUSE_EXECUTOR} account validator import ${LIGHTHOUSE_EXTRA_FLAGS} --reuse-password --password-file=${VAULT_PASSWORD} --directory=${VAULT_KEYSTORES}"
        LIGHTHOUSE_IMPORT_SLASHING_HISTORY="${LIGHTHOUSE_EXECUTOR} account validator slashing-protection import ${SLASHING_PROTECTION_FILE} ${LIGHTHOUSE_EXTRA_FLAGS}"
        LIGHTHOUSE_EXPORT_SLASHING_HISTORY="${LIGHTHOUSE_EXECUTOR} account validator slashing-protection export ${SLASHING_PROTECTION_FILE} ${LIGHTHOUSE_EXTRA_FLAGS}"
        TEKU_IMPORT_SLASHING_HISTORY="/opt/teku/bin/teku slashing-protection import --data-path=${DATA_TEKU} --from=${SLASHING_PROTECTION_FILE}"
        TEKU_EXPORT_SLASHING_HISTORY=" /opt/teku/bin/teku slashing-protection export --data-path=${DATA_TEKU} --to=${SLASHING_PROTECTION_FILE}"
    fi
    
    if [[ "$VALIDATOR_TYPE" = "prysm" ]] || [[ "$VALIDATOR_TYPE" = "lighthouse" ]]; then
        if [ -z "$(ls -A ${DATA}/${VALIDATOR_TYPE}/validators)" ]; then export REIMPORT=true; fi
    elif [[ "$VALIDATOR_TYPE" = "teku" ]]; then
        if [ -z "$(ls -A ${DATA_TEKU}/validator)" ]; then export REIMPORT=true; fi
    fi
        
    # Keys are reimported in two cases
    # 1. Current keystores directory is empty
    # 2. reimportKeystores value is set to true
    if [[ "$REIMPORT" = "true" ]]; then
        # Authorization in Vault
        bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' ${VAULT_ADDR}/v1/sys/health)" != "200" ]]; do echo "Waiting for the vault to become available..." && sleep 5; done'
        KUBE_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
        VAULT_CLIENT=`curl --silent --request POST --data '{"jwt": "'"${KUBE_TOKEN}"'", "role": "'"${SERVICE_ACCOUNT}"'"}' ${VAULT_ADDR}/v1/auth/kubernetes/login`
        export VAULT_TOKEN="$(echo ${VAULT_CLIENT} | jq -r '.auth.client_token')"
    
        # Get keystores password
        rm -rf ${VAULT} || true && mkdir -p ${VAULT_KEYSTORES}
        PASSWORD=$(vault kv get -field=password.txt -version=1 validators/${SERVICE_ACCOUNT}/password)
        echo ${PASSWORD} > ${VAULT_PASSWORD}
    
        # Preparing keystores for import
        echo "$(vault kv get -version=1 validators/${SERVICE_ACCOUNT}/keystores)" > ${VAULT}/keystores.txt
        while read line; do
            if [[ "$line" =~ ^keystore.* ]]; then
                echo $line | awk '{ print substr($0, index($0,$2)) }' > ${VAULT_KEYSTORES}/`echo $line | awk '{print $1}'`
            fi
        done <${VAULT}/keystores.txt
    
        if [ -z "$(ls -A ${VAULT_KEYSTORES})" ]; then
          echo "No keys available to start. Check that Vault is running and there are keys in it"
          exit 1
        fi
    
        # Remove old keystores
        rm -rf ${DATA_LIGHTHOUSE}/validators/0* \
               ${DATA_LIGHTHOUSE}/validators/validator_definitions.yml \
               ${DATA_PRYSM}/validators \
               ${DATA_TEKU}/validator || true
    
        # Import keystores
        if [[ "$VALIDATOR_TYPE" = "prysm" ]]; then
            touch ${DATA_PRYSM}/tosaccepted
            ${PRYSM_IMPORT}
            cp ${VAULT_PASSWORD} ${DATA_PRYSM}/validators/password.txt
        elif [[ "$VALIDATOR_TYPE" = "lighthouse" ]]; then
            ${LIGHTHOUSE_IMPORT}
        elif [[ "$VALIDATOR_TYPE" = "teku" ]]; then
            mkdir -p ${DATA_TEKU}/validator/keys ${DATA_TEKU}/validator/passwords
            cd ${VAULT_KEYSTORES}
            for key in *; do
                FILENAME=`echo ${key} | sed 's/.json//g'`
                cp ${key} "${DATA_TEKU}/validator/keys/${FILENAME}.json"
                cp ${VAULT_PASSWORD} "${DATA_TEKU}/validator/passwords/${FILENAME}.txt"
            done
        fi
    fi
    
    # This block is responsible for migration slashing history database
    # in case of client changed
    if [[ "$VALIDATOR_TYPE" != "`cat /data/validator.type`" ]]; then
        OLD_VALIDATOR=`cat /data/validator.type`
        if [[ "$OLD_VALIDATOR" = "prysm" ]]; then
            test -f ${SLASHING_PROTECTION_FILE} && rm -f ${SLASHING_PROTECTION_FILE}
            ${PRYSM_EXPORT_SLASHING_HISTORY}
            if [ $? -eq 0 ]; then
                if [[ "$VALIDATOR_TYPE" = "lighthouse" ]]; then
                    test -f ${DATA_LIGHTHOUSE}/validators/slashing_protection.sqlite && rm -f ${DATA_LIGHTHOUSE}/validators/slashing_protection.sqlite
                    ${LIGHTHOUSE_IMPORT_SLASHING_HISTORY}
                    if [ $? -ne 0 ]; then
                        echo "Failed to import slashing history database."
                        exit 1
                    fi
                elif [[ "$VALIDATOR_TYPE" = "teku" ]]; then
                    test -d ${DATA_TEKU}/validator/slashprotection && rm -rf ${DATA_TEKU}/validator/slashprotection
                    ${TEKU_IMPORT_SLASHING_HISTORY}
                    if [ $? -ne 0 ]; then
                        echo "Failed to import slashing history database."
                        exit 1
                    fi
                else
                    echo "Wrong VALIDATOR_TYPE"
                    exit 1
                fi
            else
                echo "Slashing history export failed"
                exit 1
            fi
        elif [[ "$OLD_VALIDATOR" = "lighthouse" ]]; then
            test -f ${SLASHING_PROTECTION_FILE} && rm -f ${SLASHING_PROTECTION_FILE}
            ${LIGHTHOUSE_EXPORT_SLASHING_HISTORY}
            if [ $? -eq 0 ]; then
                if [[ "$VALIDATOR_TYPE" = "prysm" ]] || [[ "$VALIDATOR_TYPE" = "prysmGnosis" ]]; then
                    test -f ${DATA_PRYSM}/validator.db && rm -f ${DATA_PRYSM}/validator.db
                    touch ${DATA_PRYSM}/tosaccepted
                    ${PRYSM_IMPORT_SLASHING_HISTORY}
                    if [ $? -ne 0 ]; then
                        echo "Failed to import slashing history database."
                        exit 1
                    fi
                elif [[ "$VALIDATOR_TYPE" = "teku" ]]; then
                    test -d ${DATA_TEKU}/validator/slashprotection && rm -rf ${DATA_TEKU}/validator/slashprotection
                    ${TEKU_IMPORT_SLASHING_HISTORY}
                    if [ $? -ne 0 ]; then
                        echo "Failed to import slashing history database."
                        exit 1
                    fi
                else
                    echo "Wrong VALIDATOR_TYPE"
                    exit 1
                fi
            else
                echo "Slashing history export failed"
                exit 1
            fi
        elif [[ "$OLD_VALIDATOR" = "teku" ]]; then
            test -f ${SLASHING_PROTECTION_FILE} && rm -f ${SLASHING_PROTECTION_FILE}
            ${TEKU_EXPORT_SLASHING_HISTORY}
            if [ $? -eq 0 ]; then
                if [[ "$VALIDATOR_TYPE" = "prysm" ]]; then
                    test -f ${DATA_PRYSM}/validator.db && rm -f ${DATA_PRYSM}/validator.db
                    touch ${DATA_PRYSM}/tosaccepted
                    ${PRYSM_IMPORT_SLASHING_HISTORY}
                    if [ $? -ne 0 ]; then
                        echo "Failed to import slashing history database."
                        exit 1
                    fi
                elif [[ "$VALIDATOR_TYPE" = "lighthouse" ]]; then
                    test -f ${DATA_LIGHTHOUSE}/validators/slashing_protection.sqlite && rm -f ${DATA_LIGHTHOUSE}/validators/slashing_protection.sqlite
                    ${LIGHTHOUSE_IMPORT_SLASHING_HISTORY}
                    if [ $? -ne 0 ]; then
                        echo "Failed to import slashing history database."
                        exit 1
                    fi
                else
                    echo "Wrong VALIDATOR_TYPE"
                    exit 1
                fi
            else
                echo "Slashing history export failed"
                exit 1
            fi
        fi
    fi
    
    rm -rf ${VAULT} || true


{{- if and (eq .Values.network "gnosis") (eq .Values.type "prysm") }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "validators.fullname" . }}-configs-gnosis-prysm
  labels:
    {{- include "validators.labels" . | nindent 4 }}
  annotations:
    "helm.sh/resource-policy": keep
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
data:
  config.yaml: |-
    CONFIG_NAME: gnosis
    PRESET_BASE: mainnet
    
    # Misc
    # ---------------------------------------------------------------
    # 2**6 (= 64)
    MAX_COMMITTEES_PER_SLOT: 64
    # 2**7 (= 128)
    TARGET_COMMITTEE_SIZE: 128
    # 2**11 (= 2,048)
    MAX_VALIDATORS_PER_COMMITTEE: 2048
    # 2**2 (= 4)
    MIN_PER_EPOCH_CHURN_LIMIT: 4
    # 2**12 (= 4096)
    CHURN_LIMIT_QUOTIENT: 4096
    # See issue 563
    SHUFFLE_ROUND_COUNT: 90
    # `2**12` (= 4096)
    MIN_GENESIS_ACTIVE_VALIDATOR_COUNT: 4096
    # Dec 08, 2021, 13:00 UTC
    MIN_GENESIS_TIME: 1638968400
    # 4
    HYSTERESIS_QUOTIENT: 4
    # 1 (minus 0.25)
    HYSTERESIS_DOWNWARD_MULTIPLIER: 1
    # 5 (plus 1.25)
    HYSTERESIS_UPWARD_MULTIPLIER: 5
    # Fork Choice
    # ---------------------------------------------------------------
    # 2**3 (= 8)
    SAFE_SLOTS_TO_UPDATE_JUSTIFIED: 8
    # Validator
    # ---------------------------------------------------------------
    # 2**10 (= 1024) ~1.4 hour
    ETH1_FOLLOW_DISTANCE: 1024
    # 2**4 (= 16)
    TARGET_AGGREGATORS_PER_COMMITTEE: 16
    # 2**0 (= 1)
    RANDOM_SUBNETS_PER_VALIDATOR: 1
    # 2**8 (= 256)
    EPOCHS_PER_RANDOM_SUBNET_SUBSCRIPTION: 256
    # 6 (estimate from xDai mainnet)
    SECONDS_PER_ETH1_BLOCK: 6
    
    # Deposit contract
    # ---------------------------------------------------------------
    # xDai Mainnet
    DEPOSIT_CHAIN_ID: 100
    DEPOSIT_NETWORK_ID: 100
    # GBC deposit contract on xDai Mainnet
    DEPOSIT_CONTRACT_ADDRESS: 0x0B98057eA310F4d31F2a452B414647007d1645d9
    # Gwei values
    # ---------------------------------------------------------------
    # 2**0 * 10**9 (= 1,000,000,000) Gwei
    MIN_DEPOSIT_AMOUNT: 1000000000
    # 2**5 * 10**9 (= 32,000,000,000) Gwei
    MAX_EFFECTIVE_BALANCE: 32000000000
    # 2**4 * 10**9 (= 16,000,000,000) Gwei
    EJECTION_BALANCE: 16000000000
    # 2**0 * 10**9 (= 1,000,000,000) Gwei
    EFFECTIVE_BALANCE_INCREMENT: 1000000000
    # Initial values
    # ---------------------------------------------------------------
    # GBC area code
    GENESIS_FORK_VERSION: 0x00000064
    BLS_WITHDRAWAL_PREFIX: 0x00
    # Time parameters
    # ---------------------------------------------------------------
    # Customized for GBC: ~1 hour
    GENESIS_DELAY: 6000
    # 5 seconds
    SECONDS_PER_SLOT: 5
    # 2**0 (= 1) slots 12 seconds
    MIN_ATTESTATION_INCLUSION_DELAY: 1
    # 2**4 (= 16) slots 1.87 minutes
    SLOTS_PER_EPOCH: 16
    # 2**0 (= 1) epochs 1.87 minutes
    MIN_SEED_LOOKAHEAD: 1
    # 2**2 (= 4) epochs 7.47 minutes
    MAX_SEED_LOOKAHEAD: 4
    # 2**6 (= 64) epochs ~2 hours
    EPOCHS_PER_ETH1_VOTING_PERIOD: 64
    # 2**13 (= 8,192) slots ~15.9 hours
    SLOTS_PER_HISTORICAL_ROOT: 8192
    # 2**8 (= 256) epochs ~8 hours
    MIN_VALIDATOR_WITHDRAWABILITY_DELAY: 256
    # 2**8 (= 256) epochs ~8 hours
    SHARD_COMMITTEE_PERIOD: 256
    # 2**2 (= 4) epochs 7.47 minutes
    MIN_EPOCHS_TO_INACTIVITY_PENALTY: 4
    
    # State vector lengths
    # ---------------------------------------------------------------
    # 2**16 (= 65,536) epochs ~85 days
    EPOCHS_PER_HISTORICAL_VECTOR: 65536
    # 2**13 (= 8,192) epochs ~10.6 days
    EPOCHS_PER_SLASHINGS_VECTOR: 8192
    # 2**24 (= 16,777,216) historical roots, ~15,243 years
    HISTORICAL_ROOTS_LIMIT: 16777216
    # 2**40 (= 1,099,511,627,776) validator spots
    VALIDATOR_REGISTRY_LIMIT: 1099511627776
    # Reward and penalty quotients
    # ---------------------------------------------------------------
    # 25
    BASE_REWARD_FACTOR: 25
    # 2**9 (= 512)
    WHISTLEBLOWER_REWARD_QUOTIENT: 512
    # 2**3 (= 8)
    PROPOSER_REWARD_QUOTIENT: 8
    # 2**26 (= 67,108,864)
    INACTIVITY_PENALTY_QUOTIENT: 67108864
    # 2**7 (= 128) (lower safety margin at Phase 0 genesis)
    MIN_SLASHING_PENALTY_QUOTIENT: 128
    # 1 (lower safety margin at Phase 0 genesis)
    PROPORTIONAL_SLASHING_MULTIPLIER: 1
    # Max operations per block
    # ---------------------------------------------------------------
    # 2**4 (= 16)
    MAX_PROPOSER_SLASHINGS: 16
    # 2**1 (= 2)
    MAX_ATTESTER_SLASHINGS: 2
    # 2**7 (= 128)
    MAX_ATTESTATIONS: 128
    # 2**4 (= 16)
    MAX_DEPOSITS: 16
    # 2**4 (= 16)
    MAX_VOLUNTARY_EXITS: 16
    # Signature domains
    # ---------------------------------------------------------------
    DOMAIN_BEACON_PROPOSER: 0x00000000
    DOMAIN_BEACON_ATTESTER: 0x01000000
    DOMAIN_RANDAO: 0x02000000
    DOMAIN_DEPOSIT: 0x03000000
    DOMAIN_VOLUNTARY_EXIT: 0x04000000
    DOMAIN_SELECTION_PROOF: 0x05000000
    DOMAIN_AGGREGATE_AND_PROOF: 0x06000000
    DOMAIN_SYNC_COMMITTEE: 0x07000000
    DOMAIN_SYNC_COMMITTEE_SELECTION_PROOF: 0x08000000
    DOMAIN_CONTRIBUTION_AND_PROOF: 0x09000000
    
    ALTAIR_FORK_VERSION: 0x01000064
    ALTAIR_FORK_EPOCH: 512
    
    INACTIVITY_SCORE_BIAS: 4
    # 2**4 (= 16)
    INACTIVITY_SCORE_RECOVERY_RATE: 16
    INACTIVITY_PENALTY_QUOTIENT_ALTAIR: 50331648
    MIN_SLASHING_PENALTY_QUOTIENT_ALTAIR: 64
    PROPORTIONAL_SLASHING_MULTIPLIER_ALTAIR: 2
    
    # Sync committee
    # ---------------------------------------------------------------
    # 2**9 (= 512)
    SYNC_COMMITTEE_SIZE: 512
    # 2**9 (= 512)
    # assert EPOCHS_PER_SYNC_COMMITTEE_PERIOD * SLOTS_PER_EPOCH <= SLOTS_PER_HISTORICAL_ROOT
    EPOCHS_PER_SYNC_COMMITTEE_PERIOD: 512
{{- end }}
