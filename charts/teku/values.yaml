# Default values for teku.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

## Init image is used to chown data volume, initialise genesis, etc.
##
initImage:
  repository: "busybox"
  tag: "1.34"
  pullPolicy: IfNotPresent

## Sidecar image is used to perform Liveness/Readiness probes.
##
sidecar:
  repository: "europe-west4-docker.pkg.dev/stakewiselabs/public/ethnode-sidecar"
  tag: "v1.0.3"
  pullPolicy: IfNotPresent
  bindAddr: "0.0.0.0"
  bindPort: 3000

## Teku image
##
image:
  repository: consensys/teku
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "22.6.0"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

## Pod Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
##
securityContext:
  fsGroup: 1000
  runAsUser: 1000

## RBAC configuration.
## ref: https://kubernetes.io/docs/reference/access-authn-authz/rbac/
##
rbac:
  ## @param rbac.create Specifies whether RBAC resources are to be created
  ##
  create: true
  ## @param rbac.clusterRules Required ClusterRole rules
  ## @default -- See `values.yaml`
  clusterRules:
    ## Required to obtain the nodes external IP
    - apiGroups: [""]
      resources:
      - "nodes"
      verbs:
      - "get"
      - "list"
      - "watch"
  ## @param rbac.rules Required ClusterRole rules
  ## @default -- See `values.yaml`
  rules:
    ## Required to get information about the serices nodePort.
    - apiGroups: [""]
      resources:
      - "services"
      verbs:
      - "get"
      - "list"
      - "watch"

service:
  type: ClusterIP

## Defines whether the service must be headless
##
svcHeadless: false

## Configure session affinity for validator clients to hit the same beacon node
## for the period specified in `timeoutSeconds`
## ref: https://kubernetes.io/docs/concepts/services-networking/service/#proxy-mode-userspace
##
sessionAffinity:
  # Whether to enable session affinity or not
  enabled: true
  # The session duration in seconds
  timeoutSeconds: 86400

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

## Used to assign priority to pods
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
##
priorityClassName: ""

## Enable pod disruption budget
## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb
##
podDisruptionBudget:
  enabled: true
  maxUnavailable: 1

## Vertical Pod Autoscaler config
## ref: https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler
##
verticalAutoscaler:
  # If true a VPA object will be created for the StatefulSet
  enabled: false
  updateMode: Off
  containerPolicies: {}

## Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: {}

## Affinity for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Configure liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
## NB! readinessProbe and livenessProbe must be disabled before genesis
##
livenessProbe:
  enabled: true
  initialDelaySeconds: 900
  timeoutSeconds: 3
  periodSeconds: 30
  failureThreshold: 3
  successThreshold: 1
  httpGet:
    path: /eth2/liveness
    port: sidecar
    scheme: HTTP

readinessProbe:
  enabled: true
  initialDelaySeconds: 60
  timeoutSeconds: 3
  periodSeconds: 30
  failureThreshold: 30
  successThreshold: 2
  httpGet:
    path: /eth2/readiness
    port: sidecar
    scheme: HTTP

## If false, data ownership will not be reset at startup
## This allows the geth node to be run with an arbitrary user
##
initChownData: true

## Whether or not to allocate persistent volume disk for the data directory.
## In case of pod failure, the pod data directory will still persist.
##
persistence:
  enabled: true
  storageClassName: ""
  accessModes:
    - ReadWriteOnce
  size: 300Gi
  annotations: {}


## Teku is an open-source Ethereum 2.0 client written in Java.
## Teku contains a full Beacon node implementation and a validator
## client for participating in consensus.

## Eth2 network ID
## Options: mainnet, prater
##
network: "mainnet"

# URLs for Eth1 nodes
eth1Endpoints: []

## Extra flags for teku beacon chain node
##
extraFlags: []

## When p2pNodePort is enabled, your P2P port will be exposed via service type NodePort/LoadBalancer.
## This will generate a service for each replica, with a port binding via NodePort/LoadBalancer.
## This is useful if you want to expose and announce your node to the Internet.
##
p2pNodePort:
  ## @param p2pNodePort.enabled Expose P2P port via NodePort
  ##
  enabled: false
  ## @param p2pNodePort.annotations
  ##
  annotations: {}
  ## @param p2pNodePort.type
  ## Options: NodePort, LoadBalancer
  type: NodePort
  ## @param p2pNodePort.startAt The ports allocation will start from this value
  ##
  startAt: 31500
  ## @param p2pNodePort.replicaToNodePort Overwrite a port for specific replicas
  ## @default -- See `values.yaml` for example
  replicaToNodePort: {}
  #  "0": 32345
  #  "3": 32348
  initContainer:
    image:
      ## @param p2pNodePort.initContainer.repository Container image to fetch nodeport information
      ##
      repository: bitnami/kubectl
      ## @param p2pNodePort.initContainer.tag Container tag
      ##
      tag: "1.23"
      ## @param p2pNodePort.initContainer.pullPolicy Container pull policy
      ##
      pullPolicy: IfNotPresent

# Sets the frequency, in slots, at which to store
# finalized states to disk. This option is ignored
# if --data-storage-mode is set to PRUNE
dataStorageArchiveFrequency: "2048"
# Sets the strategy for handling historical chain data
# (Valid values: ARCHIVE, PRUNE)
dataStorageMode: PRUNE
# Store non-canonical blocks
dataStorageNonCanonicalBlocksEnabled: false
# Rest API Settings
restApi:
  # Enables Beacon Rest API
  enabled: true
  # Comma-separated list of hostnames to allow, or *
  # to allow any host
  hostAllowList:
    - "*"
  # Interface of Beacon Rest API
  interface: "0.0.0.0"
  # Port number of Beacon Rest API
  port: "5051"
  # Comma separated list of origins to allow, or * to
  # allow any origin
  corsOrigins:
    - "*"
  # Enable swagger-docs and swagger-ui endpoints
  docsEnabled: false

## Monitoring
##
metrics:
  ## Whether to enable metrics collection or not
  ##
  enabled: true

  # Metric categories to enable
  categories:
    - JVM
    - PROCESS
    - BEACON
    - DISCOVERY
    - EVENTBUS
    - EXECUTOR
    - NETWORK
    - STORAGE
    - STORAGE_HOT_DB
    - STORAGE_FINALIZED_DB
    - REMOTE_VALIDATOR
    - VALIDATOR
    - VALIDATOR_PERFORMANCE

  # List of hostnames to allow, or * to allow any host
  hostAllowList:
    - "*"
  
  # Metrics network interface to expose metrics for Prometheus
  interface: "0.0.0.0"

  ## Metrics port to expose metrics for Prometheus
  ##
  port: 8008

  ## Prometheus Service Monitor
  ## ref: https://github.com/coreos/prometheus-operator
  ##      https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
  ##
  serviceMonitor:
    ## @param metrics.serviceMonitor.enabled Create ServiceMonitor resource(s) for scraping metrics using PrometheusOperator
    ##
    enabled: false
    ## @param metrics.serviceMonitor.namespace The namespace in which the ServiceMonitor will be created
    ##
    namespace: ""
    ## @param metrics.serviceMonitor.interval The interval at which metrics should be scraped
    ##
    interval: 30s
    ## @param metrics.serviceMonitor.scrapeTimeout The timeout after which the scrape is ended
    ##
    scrapeTimeout: ""
    ## @param metrics.serviceMonitor.relabellings Metrics RelabelConfigs to apply to samples before scraping.
    ##
    relabellings: []
    ## @param metrics.serviceMonitor.metricRelabelings Metrics RelabelConfigs to apply to samples before ingestion.
    ##
    metricRelabelings: []
    ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
    ##
    honorLabels: false
    ## @param metrics.serviceMonitor.additionalLabels Additional labels that can be used so ServiceMonitor resource(s) can be discovered by Prometheus
    ##
    additionalLabels: {}
  ## Custom PrometheusRule to be defined
  ## ref: https://github.com/coreos/prometheus-operator#customresourcedefinitions
  ##
  prometheusRule:
    ## @param metrics.prometheusRule.enabled Create a custom prometheusRule Resource for scraping metrics using PrometheusOperator
    ##
    enabled: false
    ## @param metrics.prometheusRule.default Create a default set of Alerts
    ##
    default: true
    ## @param metrics.prometheusRule.namespace The namespace in which the prometheusRule will be created
    ##
    namespace: ""
    ## @param metrics.prometheusRule.additionalLabels Additional labels for the prometheusRule
    ##
    additionalLabels: {}
    ## @param metrics.prometheusRule.rules Custom Prometheus rules
    ##
    rules: []
