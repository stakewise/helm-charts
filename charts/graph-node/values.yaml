# Default values for graph-node.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: graphprotocol/graph-node
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v0.24.2"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

## Graph Node Configuration
#
graph:
  # how often to poll Ethereum for new blocks (in ms)
  ethereumPollingInterval: 500
  # Control log levels
  # values: debug, error, info, warn, or trace
  graphLog: "info"
  # IPFS URL
  ipfsUrl: graph-node-ipfs:5001
  # Ethereum Node Address
  ethereumNode: mainnet:http://erigon.chain:8545
  # "instant" or "synced". Synced will only switch a named subgraph to a new deployment once it has synced,
  # making the new deployment the "Pending" version
  experimentalSubgraphVersionSwitchingMode: "synced"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

service:
  type: ClusterIP
  ports:
    # Port for the GraphQL HTTP server
    http: 8000
    # Port for the GraphQL WebSocket server
    websocket: 8001
    # Port for the JSON-RPC admin server
    jsonrpc: 8020
    # Port for index status
    indexStatus: 8030
    # Port for Prometheus Exporter
    metrics: 8040

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

## Configure resource requests and limits.
## http://kubernetes.io/docs/user-guide/compute-resources/
##
resources: {}

## Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## Affinity for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## used to assign priority to pods
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
##
priorityClassName: ""

## PostgreSQL Server
#
postgresql:
  enabled: true
  volumePermissions:
    enabled: true
    image:
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 10-debian-10-r98
      pullPolicy: Always
    securityContext:
      runAsUser: 0
  securityContext:
    enabled: true
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
  rbac:
    create: false
  postgresqlHost: graph-node-postgresql
  postgresqlPort: "5432"
  postgresqlUsername: "postgres"
  postgresqlPassword: "graph"
  usePasswordFile: true
  postgresqlDatabase: graph
  postgresqlDataDir: /bitnami/postgresql/data
  primaryAsStandBy:
    enabled: false
  postgresqlSharedPreloadLibraries: "pgaudit,pg_stat_statements"
  shmVolume:
    enabled: true
    chmod:
      enabled: true
  persistence:
    enabled: true
    mountPath: /bitnami/postgresql
    subPath: ''
    accessModes:
      - ReadWriteOnce
    size: 20Gi
    annotations: { }
    selector: { }
  readReplicas:
    persistence:
      enabled: true
  resources:
    requests:
      memory: 384Mi
      cpu: 250m
  networkPolicy:
    enabled: false
  tls:
    enabled: false
  metrics:
    enabled: true

# IPFS Server
ipfs:
  enabled: true
