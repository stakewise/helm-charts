kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: {{ template "geth.fullname" . }}
  labels:
    {{- include "geth.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "geth.selectorLabels" . | nindent 6 }}
  serviceName: {{ template "geth.fullname" . }}
  replicas: {{ .Values.replicas }}
  template:
    metadata:
      labels:
        {{- include "geth.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.affinity }}
      affinity:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
    {{- with .Values.securityContext }}
      securityContext:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
      serviceAccountName: {{ template "geth.fullname" . }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- if and .Values.persistence.enabled .Values.initChownData }}
      initContainers:
        - name: init-chown
          image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
          imagePullPolicy: {{ .Values.initImage.pullPolicy }}
          securityContext:
            runAsUser: 0
          command: ["chown", "-R", "{{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.runAsUser }}", "/data"]
          volumeMounts:
            - name: data
              mountPath: /data
      {{- end }}
      containers:
        - name: node
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
          {{- if .Values.rpc.enabled }}
            - "--http"
            - "--http.addr=0.0.0.0"
            - "--http.port={{ .Values.rpc.port }}"
            - "--http.corsdomain={{ .Values.rpc.corsDomain }}"
            - "--http.vhosts={{ .Values.rpc.vhosts }}"
            - "--http.api={{ .Values.rpc.api }}"
          {{- end }}
          {{- if .Values.ws.enabled }}
            - "--ws"
            - "--ws.addr=0.0.0.0"
            - "--ws.port={{ .Values.ws.port }}"
            - "--ws.origins={{ .Values.ws.origins }}"
            - "--ws.api={{ .Values.ws.api }}"
          {{- end }}
            - "--datadir=/data/ethereum"
            - "--ethash.dagdir=/data/ethereum/.ethash"
            - "--ipcdisable"
          {{- if eq .Values.networkId "goerli" }}
            - "--goerli"
          {{- end }}
          {{- range .Values.extraFlags }}
            - {{ . | quote }}
          {{- end }}
          {{- if .Values.metrics.enabled }}
          {{- range .Values.metrics.flags }}
            - {{ . | quote }}
          {{- end }}
          {{- end }}
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
            - containerPort: 30303
              name: discovery-tcp
              protocol: TCP
            - containerPort: 30303
              name: discovery-udp
              protocol: UDP
          {{- if .Values.rpc.enabled }}
            - name: rpc
              containerPort: {{ .Values.rpc.port }}
          {{- end }}
          {{- if .Values.ws.enabled }}
            - name: ws
              containerPort: {{ .Values.ws.port }}
          {{- end }}
          {{- if .Values.metrics.enabled }}
            - name: metrics
              containerPort: {{ .Values.metrics.port }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /data/ethereum
        {{- if .Values.rpc.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.rpc.port }}
            initialDelaySeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.rpc.port }}
            initialDelaySeconds: 15
            timeoutSeconds: 5
        {{- end }}
        {{- with .Values.resources }}
          resources:
            {{ toYaml . | nindent 12 | trim }}
        {{- end }}
{{- if (not .Values.persistence.enabled) }}
      volumes:
        - name: data
          emptyDir: {}
{{- else }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          {{- include "geth.labels" . | nindent 10 }}
      spec:
        accessModes: {{ .Values.persistence.accessModes }}
        storageClassName: {{ .Values.persistence.storageClassName }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
{{- end }}
